#======================================================================
    Development script for mgm.jl
    
    The most problematic part of the package is the parametrization of
    the pressure distribution: cpgen10h has no guarantee to be fully
    representative of the cp(x) developed by good airfoils. During the
    first generations of a global search it is common to see very bad
    airfoil geometries with bumps and wrinkles. Other limitations are:
    - not suited for transonic/supersonic airfoils
    - difficult to change the number of parameters

    To solve those issues a new parametrization is developed. Instead
    of relying on hand-crafted algorithms, a simple autoencoder neural
    network is employed. Trained on the pressure distributions
    generated by existing aifoils, the neural network requires less
    parameters and is more representative than cpgen10h.

    This script analyzes all the 1621 airfoils from the UIUC Airfoil
    Coordinates Database (Version 2.0, updated to 2021/12/10) using
    panel1, then it builds a CSV dataset of the pressure distributions.

    Author: Andrea Pavan
    Project: AirfoilInverseDesign.jl package
    License: MIT
    Date: 29/12/2023
======================================================================#
include("../src/airfoilutils.jl");
include("../src/panel.jl");
#using Plots;


#airfoil database taken from: https://m-selig.ae.illinois.edu/ads/coord_database.html
#direct download link: https://m-selig.ae.illinois.edu/ads/archives/coord_seligFmt.zip


#create dataset
println("Creating dataset...");
csvfileio = open(joinpath(@__DIR__,"02_dataset_x20.csv"),"w");
write(csvfileio, "airfoil,cp\n");
close(csvfileio);
#filein = "psu94097.dat";
for filein in readdir("dev/02_coord_seligFmt/")
    #read DAT file
    #(airfoilin,airfoilheader) = importairfoilfromfile(joinpath(@__DIR__,"02_coord_seligFmt",filein));
    (airfoilin,airfoilheader) = importairfoilfromfile("dev/02_coord_seligFmt/"*filein);

    #scale to [0,1]
    airfoilin[:,1] .-= minimum(airfoilin[:,1]);
    airfoilin[:,1] ./= maximum(airfoilin[:,1]);

    #interpolate to 20 nodes
    (airfoil,_) = generatenaca4airfoil("0009",20);
    airfoilLEidx = findfirst(abs.(airfoil[:,1]).==minimum(abs.(airfoil[:,1])));    #index of the airfoil leading edge (the point that separates the upper from the lower surface)
    airfoilinLEidx = findfirst(abs.(airfoilin[:,1]).==minimum(abs.(airfoilin[:,1])));
    for i=1:airfoilLEidx
        #upper surface
        if airfoil[i,1]>airfoilin[1,1]
            airfoil[i,2] = airfoilin[1,2];
            break;
        else
            for j=1:airfoilinLEidx
                #interpolate between two nodes
                if airfoilin[j+1,1]<=airfoil[i,1]<=airfoilin[j,1]
                    airfoil[i,2] = airfoilin[j+1,2] + (airfoilin[j,2]-airfoilin[j+1,2])*(airfoil[i,1]-airfoilin[j+1,1])/(airfoilin[j,1]-airfoilin[j+1,1]);
                    break;
                end
            end
        end
    end
    for i=airfoilLEidx+1:size(airfoil,1)
        #lower surface
        if airfoil[i,1]>airfoilin[end,1]
            airfoil[i,2] = airfoilin[end,2];
            break;
        else
            for j=airfoilinLEidx:size(airfoilin,1)
                #interpolate between two nodes
                if airfoilin[j,1]<=airfoil[i,1]<=airfoilin[j+1,1]
                    airfoil[i,2] = airfoilin[j,2] + (airfoilin[j+1,2]-airfoilin[j,2])*(airfoil[i,1]-airfoilin[j,1])/(airfoilin[j+1,1]-airfoilin[j,1]);
                    break;
                end
            end
        end
    end

    #compare geometries
    #=plt1 = plot(airfoil[:,1], airfoil[:,2], label="Interpolated",
        title = "Inverse design airfoil - geometry comparison",
        xlabel = "x/c",
        ylabel = "y/c",
        #xlims = [-0.1,1.1],
        #ylims = [-0.6,0.6]
    );
    scatter!(plt1, airfoilin[:,1], airfoilin[:,2], label="Original");
    display(plt1);=#

    #analyze with panel method
    (cp,_,_,_,_) = panel1(airfoil,0);
    #=plt2 = plot(cp[:,1], cp[:,2:end],
        title = "Pressure distribution - "*airfoilheader,
        xlabel = "x/c",
        ylabel = "cp",
        yflip = true
    );
    display(plt2);=#

    #discard low quality samples and save to CSV
    if minimum(cp)>-1.5
        global csvfileio = open(joinpath(@__DIR__,"02_dataset_x20.csv"),"a");
        write(csvfileio, "\""*filein*"\","*string(cp[:,2])*"\n");
        close(csvfileio);
    end
end
println("Operation completed");
